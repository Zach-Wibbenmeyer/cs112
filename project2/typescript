Script started on Mon 28 Sep 2015 07:39:02 PM EDT
zdw3@ritchie:~/workspace/cs112/project2$ ls
array.cpp      array.h		ArrayTester.h  main.cpp		 typescript
arrayData.txt  ArrayTester.cpp	Debug	       spreadsheet.xlsx
zdw3@ritchie:~/workspace/cs112/project2$ cat   cat arr   array.cpp array.h a ArrayTester.h Arr ayTester.cpp main.cpp   cpp
/* array.cpp defines "C style" array operations


 * Name: Zach Wibbenmeyer
 * Date: Sept 28, 2015
 * Begun by: Joel Adams, for CS 112 at Calvin College.
 */
 
#include "array.h"
using namespace std;

void initialize(double *a, int size) {
	int val = 0;
	for (int i = 0; i < size; i++) {
		val = i+1;
		a[i] = val;
	}
}

void print(double *a, int size) {
	for (int i = 0; i < size; i++) {
		cout << *a << '\t';
		a++;
	}
}		

/* average() searches the variables and prints the average of the numbers
 * @param: double --> *a, int --> size
 * @return: the sum divided by the size of the variable
 */
double average(double *a, int size) {
	int sum = 0;
	for (int i = 0; i < size; i++) {
		sum += a[i];
	}
	return (sum / size);
}

/*sum() searches the arrays and returns the sum of all the inputs
 * @param: double --> a*, int --> size
 * @return: The sum of the inputs in the arrays
 */
double sum(double *a, int size) {
	double total = 0;
	for (int x = 0; x < size; x++) {
		total += a[x];
	}
	return total;
}

/* read() reads size values from in and stores them in a
 * @param: istream& --> in, double --> *a, int --> size
 */
void read(istream& in, double *a, int size) {
	for (int x = 0; x < size; x++) {
		in >> a[x];
	}
}

/* fill () opens an ifstream, reads an integer from fileName into numValues,
 * 		dynamically allocates an array of numValues double values,disposes of the old array
 * 		storing address in a, reads numValues from the file and stores them in the dynamic array,
 * 		and then closes the ifstream
 * @param: string& --> fileName, double --> *&a, int --> &numValues
 */
void fill(const string& fileName, double *&a, int &numValues) {
	ifstream fin(fileName.c_str());
	assert (fin.is_open());
	fin >> numValues;
	delete [] a;
	a = new double[numValues];
	read(fin, a, numValues);
	fin.close();
}

/* resize() changes the size of the array from oldSize to newSize. If
 * 		newSize is greater than oldSize, all of the values in the array are
 * 		copied into the new array.  If newSize is less than oldSize, the end-elements
 * 		of the array will be truncated.  The old array is then disposed of.
 * @param: double --> *&a, int --> oldSize, int --> newSize
 */
void resize(double *&a, int oldSize, int newSize) {
	if (oldSize != newSize) {
		double * b = new double[newSize];
		if (newSize > oldSize) {
			for (int x = 0; x < oldSize; x++) {
				b[x] = a[x];
			}
			for (int x = oldSize; x < newSize; x++) {
				b[x] = 0;
			}
		}
		else if (oldSize > newSize) {
			for (int x = 0; x < newSize; x++) {
				b[x] = a[x];
			}
		}
		delete [] a;
		a = b;
	}
}

/* concat() passes back an array (a3) containing the values of a1 followed by those
 * 		of a2, sets size3 = size1 + size2.  Also disposes of the old array
 * @param: double --> *a1, int --> size1, double --> *a2, int --> size2,
 * 		double --> *&a3, int --> &size3
 */
void concat(double *a1, int size1, double *a2, int size2, double *&a3, int &size3) {
	int c = (size1 + size2);
	double* newArray = new double[c];
	for (int x = 0; x < size1; x++) {
		newArray[x] = a1[x];
	}
	for (int x = size1; x < c; x++) {
		newArray[x] = a2[x - size1];
	}
	delete [] a3;
	a3 = newArray;
	size3 = c;
}
/* array.h declares "C style" array operations.


 * Name: Zach Wibbenmeyer
 * Date: Sept 28, 2015
 * Begun by: Joel Adams, for CS 112 at Calvin College.
 */

//Include the necessary modules
#include <iostream>
#include <cassert>
#include <fstream>
#include <cassert>
using namespace std;

//Implement all the methods
void initialize(double *a, int size);

void print(double *a, int size);

double average(double *a, int size);

double sum(double *a, int size);

void read(istream& in, double *a, int size);

void fill(const string& fileName, double *&a, int &numValues);

void resize(double *&a, int oldSize, int newSize);

void concat(double *a1, int size1, double *a2, int size2, double *&a3, int &size3);
/*ArrayTester.h provides a class to test C-style array operations.


 * Student: Zach Wibbenmeyer
 * Date: Sept 28, 2015
 * By: Joel Adams, for CS 112 at Calvin College.
 */
#ifndef ARRAY_TESTER_H_
#define ARRAY_TESTER_H_

//Include the necessary modules
#include "array.h"  // the functions we are testing
#include <iostream>
#include <cassert>
using namespace std;

//Create a class for the Array Tester
class ArrayTester
{
public:
	//Implement all the tests
	ArrayTester();
	virtual ~ArrayTester();
	void runTests();
	void setup();
	void cleanup();
	void testInitialize();
	void testPrint();
	void testAverage();
	void testSum();
	void testResize();
	void testConcat();
	void testFill();
	void testRead();
private:
	double * a1;
	double * a2;
	double * a3;
};

#endif /*ARRAY_TESTER_H_*/
/* ArrayTester.cpp defines the methods to test C-style array operations.

 * Student: Zach Wibbenmeyer
 * Date: Sept 28, 2015
 * By: Joel Adams, for CS 112 at Calvin College.
 */
 
//Include the necessary modules
 #include "ArrayTester.h"
 #include <fstream>
 using namespace std;

 //Set the arrays to be empty
ArrayTester::ArrayTester() {
	a1 = a2 = a3 = NULL;
}

ArrayTester::~ArrayTester() {
        cleanup();
}

void ArrayTester::cleanup() {
	delete [] a1; a1 = NULL;
	delete [] a2; a2 = NULL;
	delete [] a3; a3 = NULL;
}

//Implement all the tests
void ArrayTester::runTests() {
	testInitialize();
	testPrint();
	testAverage();
	testSum();
	testResize();
	testConcat();
	testFill();
	testRead();
	cout << "All tests passed!" << endl;
}

//Set the arrays to be equal to some values
void ArrayTester::setup() {
	a1 = new double[3];
	for (int i = 0; i < 3; i++) {
		a1[i] = i+1;
	}
	a2 = new double[4];
	for (int i = 0; i < 4; i++) {
		a2[i] = i+2;
	}
	a3 = new double[5];
	for (int i = 0; i < 5; i++) {
		a3[i] = i+3;
	}
}

//Test the initialize method
void ArrayTester::testInitialize()  {
	cout << "Testing initialize()... " << flush;
	setup();
	initialize(a1, 3);
	for (int i = 0; i < 3; i++) {
		assert( a1[i] == i+1 );
	}
	initialize(a2, 4);
	for (int i = 0; i < 4; i++) {
		assert( a2[i] == i+1 );
	}
	initialize(a3, 5);
	for (int i = 0; i < 5; i++) {
		assert( a3[i] == i+1 );
	}
        cleanup();
	cout << "Passed!" << endl;
}

//Test the print method
void ArrayTester::testPrint() {
	cout << "Testing print()... " << flush;
	setup();
	cout << "\nExpecting 3 values: 1, 2, 3..." << endl;
	print(a1, 3);
	cout << "\nExpecting 4 values: 2, 3, 4, 5..." << endl;
	print(a2, 4);
	cout << "\nExpecting 5 values: 3, 4, 5, 6, 7..." << endl;
	print(a3, 5);
        cleanup();
	cout << "\nPassed!" << endl;
}

//Test the average method
void ArrayTester::testAverage() {
	cout << "Testing average()... " << flush;
	setup();
	assert( average(a1, 3) == 2  );
	assert( average(a2, 4) == 3 );
	assert( average(a3, 5) == 5 );
        cleanup();
	cout << "Passed!" << endl;
}

//Test the sum method
void ArrayTester::testSum() {
	cout << "Testing sum()... " << flush;
	setup();
	assert( sum(a1, 3) == 6 );
	assert( sum(a2, 4) == 14 );
	assert( sum(a3, 5) == 25 );
        cleanup();
	cout << "Passed!" << endl;
}

//Test the resize method
void ArrayTester::testResize() {
	cout << "Testing resize()... " << flush;
	setup();
	double * temp1 = a1;
	resize(a1, 3, 7);
	assert( a1 != temp1 );
	for (int i = 0; i < 3; i++) {
		assert( a1[i] == i+1 );
	}
	for (int i = 3; i < 7; i++) {
		assert( a1[i] == 0 );
	}

	double *temp3 = a3;
	resize(a3, 5, 3);
	assert( temp3 != a3 );
	for (int i = 0; i < 3; i++) {
		assert( a3[i] == i+3 );
	}
        cleanup();
	cout << "Passed!" << endl;
}

//Test the concat method
void ArrayTester::testConcat() {
	cout << "Testing concat()... " << flush;
	setup();
	int size1 = 3, size2 = 4, size3 = 5;
	double *temp1 = a1;
	double *temp2 = a2;
	double *temp3 = a3;
	concat(a1, size1, a2, size2, a3, size3);
	assert( temp1 == a1 );
	assert( temp2 == a2 );
        /* the next assertion assumes that the new array's base
         *  address is different from the old array's base address,
         *  which may not be true. If concat() seems to be right,
         *  and passes all assertions except this one, you may
         *  comment out this assertion.
         */
	assert( temp3 != a3 );
	assert( size1 == 3 );
	assert( size2 == 4 );
	assert( size3 == 7 );
	for (int i = 0; i < 3; i++) {
		assert( a3[i] == i+1 );
	}
	int j = 2;
	for (int i = 3; i < 7; i++) {
		assert( a3[i] == j );
		j++;
	}
        cleanup();
	cout << "Passed!" << endl;
}

//Test the fill method
void ArrayTester::testFill() {
	cout << "Testing fill()... " << flush;
	setup();
	int size1 = 3;
	double *temp1 = a1;
	fill("arrayData.txt", a1, size1);
	assert( a1 != temp1 );
	assert( size1 == 6);
	for (int i = 0; i < size1; i++) {
		assert( a1[i] == i+10 );   // values should be 10, 11, 12, 13, 14, 15
	}
        cleanup();
	cout << "Passed!" << endl;
}

//Test the read method
void ArrayTester::testRead() {
	cout << "Testing read()... " << flush;
	double* a4 = new double[6];
	ifstream fin("arrayData.txt");
	assert( fin.is_open() );
	string firstLine, secondLine;
	getline(fin, firstLine);         // skip past the '6' that's there for fill()...
	getline(fin, secondLine);        // skip past the '10'
	read(fin, a4, 5);                // read 5 values instead of 6
	for (int i = 0; i < 5; i++) {    // check what we got:
		assert( a4[i] == i+11 ); //  values should be 11, 12, 13, 14, 15,
	}                                //   so test-values differ from fill()
        delete [] a4;
	cout << "Passed!" << endl;
}

/* main.cpp drives the testing of the array operations.

 * Student: Zach Wibbenmeyer
 * Date: Sept 28, 2015
 * Begun by: Joel Adams, for CS 112 at Calvin College.
 */

//Include all the necessary modules
#include "ArrayTester.h"
#include "array.h"
using namespace std;

//Main function
int main() {
	ArrayTester at;
	at.runTests();
}
zdw3@ritchie:~/workspace/cs112/project2$ [Kzdw3@ritchie:~/workspace/cs112/project2$ cd Debug
zdw3@ritchie:~/workspace/cs112/project2/Debug$ ls
array.d  array.o  ArrayTester.d  ArrayTester.o	main.d	main.o	makefile  objects.mk  project2	sources.mk  subdir.mk
zdw3@ritchie:~/workspace/cs112/project2/Debug$ make all
make: Nothing to be done for `all'.
zdw3@ritchie:~/workspace/cs112/project2/Debug$ cd ..
zdw3@ritchie:~/workspace/cs112/project2$ .? ? /Debug/pr  project2/ 
Testing initialize()... Passed!
Testing print()... 
Expecting 3 values: 1, 2, 3...
1	2	3	
Expecting 4 values: 2, 3, 4, 5...
2	3	4	5	
Expecting 5 values: 3, 4, 5, 6, 7...
3	4	5	6	7	
Passed!
Testing average()... Passed!
Testing sum()... Passed!
Testing resize()... Passed!
Testing concat()... Passed!
Testing fill()... Passed!
Testing read()... Passed!
All tests passed!
zdw3@ritchie:~/workspace/cs112/project2$ exit

Script done on Mon 28 Sep 2015 07:41:35 PM EDT
