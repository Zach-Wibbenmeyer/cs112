/* Stack.cpp defines the dynamically allocated (array-based ) Stack operations.
 * Joel Adams, for CS 112 at Calvin College.
 * Student Name: Zach Wibbenmeyer
 * Date: July 23, 2015
 */

#include "Stack.h"

/* explicit-value constructor
 * Parameter: size, an unsigned value.
 * Precondition: size > 0.
 * Postcondition: myTop == 0 && myCapacity == size
 *              && myArray contains the address of a dynamic array of 'size' entries.
 */
Stack::Stack(unsigned size) {
	if (size > 0) {
		myTop = 0;
	    myCapacity = size;
	    myArray = new Item[size];
	}
	else {
		throw StackException("Stack(size)", "size must be positive!");
	}

}

/* copy constructor
 * Parameter: original, a Stack (const reference).
 * Postcondition: I am a copy of original.
 */
Stack::Stack(const Stack& original) {
	makeCopyOf(original);
}

/* utility method containing code refactored from
 *  the copy constructor and operator=.
 * Parameter: original, a Stack (const reference).
 * Postcondition: I am a copy of original.
 */
void Stack::makeCopyOf(const Stack& original) {
	myCapacity = original.myCapacity;
	myArray = new Item[myCapacity];

	for (unsigned i = 0; i < myCapacity; i++) {
		myArray[i] = original.myArray[i];
	}
	myTop = original.myTop;
}

/* destructor
 * Postcondition: myCapacity == 0 && myTop == 0
 *             && myArray has been deallocated.
 */
Stack::~Stack() {
	delete [] myArray;
	myArray = NULL;
	myCapacity = 0;
	myTop = 0;
}

/* assignment operator
 * Parameter: original, a Stack (const reference).
 * Postcondition: I am a copy of original
 *              && I have been returned.
 */
Stack& Stack::operator=(const Stack& original) {
	if (this != &original) {
		delete [] myArray;
		makeCopyOf(original);
	}
	return *this;
}

/* isEmpty() method - checks if the stack is empty
 * @return: true if the stack is empty, false if it is not
 * Postcondition: The stack can be verified if it is empty or not
 */
bool Stack::isEmpty() {
	if (myTop == 0) {
		return true;
	}
	else {
		return false;
	}
}

/* push() method - append an item to the stack
 * @param: const Item& it
 * Precondition: Stack must not be full, or else an exception will be thrown
 * Postcondition: an Item will be appended to the stack
 */
void Stack::push(const Item& it) {
	if (myTop == myCapacity) {
		throw StackException("push()", "stack is full");
	}
	else {
		myArray[myTop] = it;
		myTop++;
	}
}

/* isFull() method - Checks if the stack is full or not
 * @return: true if the stack is full, false if it is not
 * Postcondition: The stack will be checked for fullness
 */
bool Stack::isFull() {
	if (myTop == myCapacity) {
		return true;
	}
	else {
		return false;
	}
}

/* getTop() method - Lets the user look at the top stack item without changing the stack
 * Precondition: The stack must not be empty, or else an exception will be thrown
 * Postcondition: User can look at the top stack item
 */
Item Stack::getTop() const {
	if (myTop > 0) {
		return myArray[myTop - 1];
	}
	else {
		throw StackException("getTop()", "stack is empty");
	}
}

/* pop() method - removes and returns the top value from the stack
 * Precondition: stack must not be empty or else an exception will be thrown
 * Postcondition: the top item in the stack will be removed and returned
 */
Item Stack::pop() {
	if (myTop == 0) {
		throw StackException("pop()" , "stack is empty");
	}
	else {
		myTop = myTop - 1;
		return myArray[myTop];
	}
}

unsigned Stack::getSize() const {
	return myTop;
}

unsigned Stack::getCapacity() const {
	return myCapacity;
}

void Stack::setCapacity(unsigned newCapacity) {
	if (newCapacity < myCapacity) {
		throw StackException("setCapacity: newCapacity is too small");
	}
	else if (newCapacity > myCapacity) {
		Item* array = new Item[newCapacity];
		for (unsigned x = 0; x < myCapacity; x++) {
			array[x] = myArray[x];
		}
		for (unsigned x = myCapacity; x < newCapacity; x++) {
			array[x] = 0;
		}
		delete [] myArray;
		myArray = array;
		myCapacity = newCapacity;
	}
}
