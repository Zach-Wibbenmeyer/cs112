Script started on Wed 09 Dec 2015 07:27:39 PM EST
zdw3@boole:~/workspace/cs112/project10$ ls
Image000062.png  Image000350.png  Image000837.png    main.o
Image000072.png  Image000353.png  Image001014.png    Makefile
Image000084.png  Image000360.png  Image002024.png    pics
Image000101.png  Image000379.png  ImageInverter.cpp  Project 10 Chart.xls
Image000126.png  Image000395.png  ImageInverter.h    typescript
Image000169.png  Image000437.png  ImageInverter.o
Image000254.png  Image000510.png  main
Image000344.png  Image000824.png  main.cpp
zdw3@boole:~/workspace/cs112/project10$ cat ImageInverter.cp    cpp Ima   ImageInverter.h ma in.cpp 
/* ImageInverter.cpp defines the ImageInverter methods
 *  that are declared in ImageInverter.h.
 *
 * Joel Adams, Fall 2015, for CS 112 at Calvin College.
 */

#include "ImageInverter.h"

/* explicit constructor
 * @param fileName, a string.
 * @param width, an int.
 * @param height, an int.
 * Precondition: fileName contains the name of a valid image file
 *               && width contains the number of columns in that image
 *               && height contains the number of rows in the image.
 * Postcondition: myCanvas0 contains the image from fileName
 *               && myWidth == width
 *               && myHeight == height
 *               && myFileName == fileName
 */

ImageInverter::ImageInverter(const string& fileName, int width, int height)
 : myCanvas0(0, 0, width, height, fileName),
   myWidth(width), myHeight(height), myFileName(fileName)
{
   myCanvas0.start();
   myCanvas0.drawImage(fileName, 0, 0, width, height);
   sleep(1);
}


/* method to invert an image
 * Precondition: myCanvas0 contains a valid image.
 * Postcondition: canvas1 is displaying the inverse of the image in myCanvas0.
 */

void ImageInverter::invertImage() {
	// record starting time
	double startTime = omp_get_wtime();

	Canvas canvas1(-1, -1, myWidth, myHeight, myFileName + " Inverted");
	canvas1.start();

	ColorInt pixelColor;

	// loop through the image rows
	#pragma omp parallel for
	for (int row = 0; row < myHeight; row++) {
		// slow the processing to simulate a very large image
		myCanvas0.sleep();
		// loop through the image columns
		for (int col = 0; col < myWidth; col++) {
			// read the pixel at canvas1[row][col]
			pixelColor = myCanvas0.getPixel(row, col);
			// compute its inverse
			int invertedR = 255 - pixelColor.R;
			int invertedG = 255 - pixelColor.G;
			int invertedB = 255 - pixelColor.B;
			// draw the inverse at the same spot in canvas2
			canvas1.drawPixel(row, col, ColorInt(invertedR,invertedG,invertedB) );
		}
	}
	// compute and display the time difference
	double time = omp_get_wtime() - startTime;
	cout << "\n\nImage inversion took "
		<< time << " seconds.\n" << endl;

	//save converted image
	canvas1.takeScreenShot();

	canvas1.wait();
}

void ImageInverter::invertImage2() {

	Canvas canvas2(-1, -1, myWidth, myHeight, myFileName + " Inverted, Chunk-Size 1");
	canvas2.start();

    // launch additional threads
    #pragma omp parallel
    {
       ColorInt pixelColor;
       // how many workers do we have?
       unsigned numThreads = omp_get_num_threads();
       // which one am I?
       unsigned id = omp_get_thread_num();

       // loop through the image rows
       for (int row = id; row < myHeight; row += numThreads) {
		 // slow the processing to simulate a very large image
		 myCanvas0.sleep();
            // loop through the image columns
            for (int col = 0; col < myWidth; col++) {
               // read the pixel at canvas1[row][col]
               pixelColor = myCanvas0.getPixel(row, col);
               // compute its inverse
               int invertedR = 255 - pixelColor.R;
               int invertedG = 255 - pixelColor.G;
               int invertedB = 255 - pixelColor.B;
               // draw the inverse at the same spot in canvas2
               canvas2.drawPixel(row, col, ColorInt(invertedR,invertedG,invertedB) );
            }
         }
      }
      canvas2.wait();
}

void ImageInverter::invertImage3() {

      Canvas canvas3(-1, -1, myWidth, myHeight, myFileName + " Inverted, Equal-Sized Chunks ");
      canvas3.start();

      // launch additional threads
      #pragma omp parallel
      {
         ColorInt pixelColor;
         // how many workers do we have?
         unsigned numThreads = omp_get_num_threads();
         // which one am I?
         unsigned id = omp_get_thread_num();

         // compute size of chunks (iterations % numThreads may != 0)
         double iterations = myHeight;
         unsigned chunkSize = (unsigned)ceil(iterations / numThreads);
         // compute starting index
         int start = id * chunkSize;
         // compute stopping index
         int stop = 0;
         if (id < numThreads-1) {
             stop = start + chunkSize;
         } else {
             stop = myHeight;
         }
         // loop through image rows in equal-sized chunks
         for (int row = start; row < stop; row++) {
            // slow the processing to simulate a very large image
            myCanvas0.sleep();
            // loop through the image columns
            for (int col = 0; col < myWidth; col++) {
               // read the pixel at canvas1[row][col]
               pixelColor = myCanvas0.getPixel(row, col);
               // compute its inverse
               int invertedR = 255 - pixelColor.R;
               int invertedG = 255 - pixelColor.G;
               int invertedB = 255 - pixelColor.B;
               // draw the inverse at the same spot in canvas2
               canvas3.drawPixel(row, col, ColorInt(invertedR,invertedG,invertedB) );
            }
         }
      }
      canvas3.wait();
}

/* grayScale() method - turns the image gray
 * @param: None
 * @return: an image
 */
void ImageInverter::grayScale() {
	//record starting time
	double startTime = omp_get_wtime();

	Canvas canvas4(-1, -1, myWidth, myHeight, myFileName + " GrayScale");
	canvas4.start();

	// launch additional threads
	#pragma omp parallel
	{

		ColorInt pixelColor;
		int intensity = 0;
		// how many workers do we have?
		unsigned numThreads = omp_get_num_threads();
		// which one am I?
		unsigned id = omp_get_thread_num();

		// compute size of chunks (iterations % numThreads may != 0)
		double iterations = myHeight;
		unsigned chunkSize = (unsigned)ceil(iterations / numThreads);
		// compute starting index
		int start = id * chunkSize;
		// compute stopping index
		int stop = 0;
		if (id < numThreads-1) {
			stop = start + chunkSize;
		} else {
			stop = myHeight;
		}


		//loop through the image rows
		for (int row = start; row < stop; row++) {
			// slow the processing to simulate a very large image
			myCanvas0.sleep();
			// loop through the image columns
			for (int col = 0; col < myWidth; col++) {
				// read the pixel at canvas1[row][col]
				pixelColor = myCanvas0.getPixel(row, col);
				intensity = ((pixelColor.R + pixelColor.G + pixelColor.B) / 3);
				canvas4.drawPixel(row, col, ColorInt(intensity, intensity, intensity) );
			}
		}
	}
	// compute and display the time difference
	double time = omp_get_wtime() - startTime;
	cout << "\n\nImage inversion took "
		  << time << " seconds.\n" << endl;

	//save converted image
	canvas4.takeScreenShot();
	canvas4.wait();
}

void ImageInverter::blur(int numPixels) {

	double startTime = omp_get_wtime();

	Canvas canvas5(-1, -1, myWidth, myHeight, myFileName + " Blur");
	canvas5.start();

	// launch additional threads
	#pragma omp parallel
	{


		// variables
		ColorInt pixel;
		ColorInt samplePixel;
		int redValue = 0;
		int greenValue = 0;
		int blueValue = 0;
		int count = 0;

		// how many workers do we have?
		unsigned numThreads = omp_get_num_threads();
		// which one am I?
		unsigned id = omp_get_thread_num();

		// compute size of chunks (iterations % numThreads may != 0)
		double iterations = myHeight;
		unsigned chunkSize = (unsigned)ceil(iterations / numThreads);
		// compute starting index
		int start = id * chunkSize;
		// compute stopping index
		int stop = 0;
		if (id < numThreads-1) {
			stop = start + chunkSize;
		} else {
			stop = myHeight;
		}

		// loop through image rows in equal-sized chunks
		for (int row = start; row < stop; row++) {
			// slow the processing to simulate a very large image
			myCanvas0.sleep();
				// loop through the image columns
				for (int col = 0; col < myWidth; col++) {
					// read the pixel at canvas1[row][col]
					pixel = myCanvas0.getPixel(row, col);

					// loop through pixel numPixels before col to numPixels after col
					for (int xSample = col - numPixels; xSample <= col + numPixels; xSample++) {
						for (int ySample = row - numPixels; ySample <= row + numPixels; ySample++) {

							// check that we are in the range of acceptable pixels
							if (xSample >= 0 && xSample < myWidth &&
								ySample >= 0 && ySample < myHeight) {
								samplePixel = myCanvas0.getPixel(xSample, ySample);

								redValue = redValue + samplePixel.R;
								greenValue = greenValue + samplePixel.G;
								blueValue = blueValue + samplePixel.B;
								count++;
							}
						}
					}
					// use average color of surrounding pixels
					canvas5.drawPixel(row, col, ColorInt((redValue / count),
																(greenValue / count),
																(blueValue / count)));
				}
		}
	}
	// compute and display the time difference
	double time = omp_get_wtime() - startTime;
	cout << "\n\nImage inversion took "
		  << time << " seconds.\n" << endl;

	//save converted image
	canvas5.takeScreenShot();
	canvas5.wait();
}
/* ImageInverter.h declares the ImageInverter class,
 *  which uses TSGL to invert a photographic image.
 *
 * Joel Adams, Fall 2015, for CS 112 at Calvin College.
 *
 * Note: We use int instead of unsigned throughout
 *       because of a bug in GCC/OpenMP.
 */

#ifndef IMAGEINVERTER_H_
#define IMAGEINVERTER_H_

#include <tsgl.h>      // Canvas, ColorInt, etc.
#include <omp.h>       // OpenMP functions
#include <unistd.h>    // sleep()

using namespace tsgl;
using namespace std;

class ImageInverter {
public:
  ImageInverter(const string& fileName, int width, int height);
  void invertImage();
  void wait()          { myCanvas0.wait(); }
  void invertImage2();
  void invertImage3();
  void grayScale();
  void blur(int numPixels);


private:
  Canvas   myCanvas0;
  int      myWidth;
  int      myHeight;
  string   myFileName;
};

#endif /* IMAGEINVERTER_H_ */
/*
 * main.cpp is a driver for an ImageInverter program
 *  using OpenMP to parallelize the image processing
 *  and TSGL to view the processing in near real time.
 *
 * Author: Joel Adams, for CS 112 at Calvin College.
 * Date: March 2015.
 */

#include "ImageInverter.h"

int main() {
	omp_set_num_threads(16);

	ImageInverter inverter("pics/beads.jpg", 1024, 1024);
//	inverter.invertImage();
//	inverter.invertImage2();
//	inverter.invertImage3();
	inverter.grayScale();
	inverter.blur(25);
	inverter.wait();
}
zdw3@boole:~/workspace/cs112/project10$ cd  cd  c   cd main
bash: cd: main: Not a directory
zdw3@boole:~/workspace/cs112/project10$ make all
make: Nothing to be done for `all'.
zdw3@boole:~/workspace/cs112/project10$ .?  ./main


Image inversion took 1.08727 seconds.



Image inversion took 5.80685 seconds.

zdw3@boole:~/workspace/cs112/project10$ exit

Script done on Wed 09 Dec 2015 07:28:50 PM EST
