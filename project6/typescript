Script started on Tue 27 Oct 2015 07:11:02 PM EDT
zdw3@englebart:~/workspace/cs112/project6$ ls
Debug	       ListTester.cpp	      typescript	vecTest2Copy.txt
list1Copy.txt  ListTester.h	      Vec.h		vecTest2.txt
List1Copy.txt  test		      vecStreamOut.txt	VecTester.cpp
list1.txt      tester.cpp	      vecTest1Copy.txt	VecTester.h
List.h	       testwriteToString.txt  vecTest1.txt
zdw3@englebart:~/workspace/cs112/project6$ cat   cat List.h ListTester.cpp ListTester. h Teste    t  tester.cpp Vec.h VecTester.cpp VecTester.h 
/*
 * List.h
 * Student Name: Zach Wibbenmeyer
 * Date: July 14, 2015
 * Begun By: Zach Wibbenmeyer, for CS 112 at Calvin College
 */

//Include the necessary modules
#include <iostream>
#include <stdexcept>
#include <fstream>
using namespace std;

#ifndef LIST_H_
#define LIST_H_

//Create a typedef of Item
typedef double Item;

template <class Item>

//Create a class List
class List {
public:
	//Implement all the methods
	List();
	virtual ~List();
	unsigned getSize() const;
	Item getFirst() const;
	Item getLast() const;
	void append(const Item& it);
	List(const List& original);
	List& operator=(const List& original);
	bool operator!=(const List& list2);
	bool operator==(const List& list2);
	void readFrom(const string& fileName);
	void writeTo(ostream& out) const;
	int getIndexOf(const Item& index);
	Item remove(const int index);
	void sortList();
	void divide(List<Item>& l1, List<Item>& l2);
	List<Item> merge(List<Item>& v2);
	void insert(const Item& it, int index);
	void writeTo(const string& fileName);
	void prepend(const Item& item);
	void readFrom(istream& in);
private:
	//Implement methods for the Node
	struct Node {
		Item myItem;
		Node * myNext;
		Node();
		Node(Item it, Node * next);
		~Node();
		// Use ListTester
		friend class ListTester;
	};
	unsigned mySize;
	Node * myFirst;
	Node * myLast;
	// Use ListTester
	friend class ListTester;
};

/* DefaultConstructor() - Initializes the variables
 * PostCondition - The list will have its default values
 */
template <class Item>
List<Item>::List() {
	mySize = 0;
	myFirst = NULL;
	myLast = NULL;
}

/* Desconstructor() - Clears the instance variables so memory isn't leaked
 * PostCondition: The memory of the instance variables for the list will
 * 		be cleared
 */
template <class Item>
List<Item>::~List() {
	delete myFirst;          // delete first node, invoking ~Node() (does nothing if myFirst == NULL)
	myFirst = myLast = NULL; // clear myFirst and myLast (optional)
	mySize = 0;              // clear mySize (optional)
}

/*
 * Default Node Constructor() - Initializes the instance variables in the node constructor
 * Post-Condition - The Node will have its default values
 */
template <class Item>
List<Item>::Node::Node() {
	myItem = 0;
	myNext = NULL;
}

//Node Deconstructor() - Clears the instance variables so memory is not leaked
template <class Item>
List<Item>::Node::~Node() {
	delete myNext;  // delete the next node, invoking ~Node() in it
				  	// (does nothing if myNext == NULL)
	myNext = NULL;  // clear myNext (optional)
	myItem = 0;     // clear myItem (optional)
}

/* NodeExplicitConstructor() - Assigns myItem to it and myNext to next
 * @param: Item --> it, Node* --> next
 */
template <class Item>
List<Item>::Node::Node(Item it, Node * next) {
	myItem = it;
	myNext = next;
}

/* getSize() method
 * @return: mySize
 */
template <class Item>
unsigned List<Item>::getSize() const {
	return mySize;
}

/* getFirst() method - if mySize is negative or myFirst is empty, throws an exception
 * 		otherwise it returns the value of myItem in the Node whose address is
 * 		myFirst
 * @return: myFirst -> myItem
 */
template <class Item>
Item List<Item>::getFirst() const {
	if ((mySize < 0) or (myFirst == NULL)) {
		throw std::underflow_error("mySize is negative or myFirst is NULL");
	}
	return myFirst -> myItem;
}

/* getLast() method - if mySize is negative or myLast is empty, throws an exception
 * 		otherwise returns the value of myItem in the Node whose address
 * 		is in myFirst
 * @return: myLast -> myItem
 */
template <class Item>
Item List<Item>::getLast() const {
	if ((mySize < 0) or (myLast == NULL)) {
		throw std::underflow_error("mySize is negative or myLast is NULL");
	}
	return myLast -> myItem;
}

/* append() method - appends items to the end of the list and increments the size
 * @param: const Item& --> it
 * Precondition - mySize must be 0 or else myLast -> myNext = nodePtr
 * 		will be returned
 * Postcondition - myLast will = nodePtr and mySize will be incremented
 */
template <class Item>
void List<Item>::append(const Item& it) {
	Node * nodePtr = new Node(it, NULL);
	if (mySize == 0) {
		myFirst = nodePtr;
	}
	else {
		myLast -> myNext = nodePtr;
	}
	myLast = nodePtr;
	mySize++;
}


/* List CopyConstructor() -
 * @param: const List& --> original
 * Precondition: size of original must be greater than 0
 */
template <class Item>
List<Item>::List(const List<Item>& original) {
  myFirst = myLast = NULL;          //  set pointers
  mySize = 0;                       //   and size to 'empty' values
  if (original.getSize() > 0) {     //  if there are nodes to copy:
	 Node * oPtr = original.myFirst; //  start at the first node
	 while (oPtr != NULL) {         //  while there are more nodes:
		append(oPtr->myItem);       //   append the item in that node
		oPtr = oPtr->myNext;        //   advance to next node
	 }
  }
}

/* AssignmentOperator -
 * @param: const List& --> original
 * @return: *this
 * Precondition: original and I must be two distinct lists and size of
 * 		original must be greater than 0
 * Postcondition: *this will be returned
 */
template <class Item>
List<Item>& List<Item>::operator=(const List<Item>& original) {
	if (this != &original) {
		delete myFirst;
		myFirst = myLast = NULL;
		mySize = 0;
		if (original.getSize() > 0) {
			Node * nPtr = original.myFirst;
			while (nPtr != NULL) {
				append(nPtr -> myItem);
				nPtr = nPtr -> myNext;
			}
		}
	}
	return *this;
}

// Tammie wrote this method
template <class Item>
bool List<Item>::operator==(const List<Item>& list2) {
	if (mySize == 0 and list2.getSize() == 0) {
		return true;
	}
	else if (mySize != list2.getSize()) {
		return false;
	}
	else {
		Node * Ptr1 = myFirst;
		Node * Ptr2 = list2.myFirst;
		while (Ptr1) {
			if (Ptr1 -> myItem != Ptr2 -> myItem) {
				return false;
			}
			Ptr1 = Ptr1 -> myNext;
			Ptr2 = Ptr2 -> myNext;
		}
	}
	return true;
}

/* operator!=() method - creates the != operator
 * @param: const List& list2
 * @return: a bool
 */
template <class Item>
bool List<Item>::operator!=(const List<Item>& list2) {
	if (mySize == 0 and list2.getSize() == 0) {
		return false;
	}
	else if (mySize != list2.getSize()) {
		return true;
	}
	else {
		Node * Ptr1 = myFirst;
		Node * Ptr2 = list2.myFirst;
		while (Ptr1) {
			if (Ptr1 -> myItem != Ptr2 -> myItem) {
				return true;
			}
			Ptr1 = Ptr1 -> myNext;
			Ptr2 = Ptr2 -> myNext;
		}
	}
	return false;
}

/* readFrom(fileName) method - reads a list from a file
 * @param: const string& -> fileName
 * Postcondition: the list will be read from a file
 */
template <class Item>
void List<Item>::readFrom(const string& fileName) {
	ifstream fin(fileName.c_str());
	Item it;
	delete myFirst;
	delete myLast;
	mySize = 0;
	while (!fin.eof()) {
		fin >> it;
		append(it);
	}
}

/* writeTo(cout) method - writes the list to an ostream
 * @param: ostream& -> out
 * Postcondition: List will be written to an ostream
 */
template <class Item>
void List<Item>::writeTo(ostream& out) const {
	Node * Ptr1 = myFirst;
	while (Ptr1) {
		out << Ptr1 -> myItem;
		Ptr1 = Ptr1 -> myNext;
		if (Ptr1) {
			out << "\t\t";
		}
	}
}

/* getIndexOf() method - Uses a pointer to iterate through a list and get the the item in the index
 * @param: const Item& -> index
 * @return: an int, which is the item of the index searched for
 * 			-1 if the index is not found
 * Postcondition: Index searched for will be returned
 */
template <class Item>
int List<Item>::getIndexOf(const Item& index) {
	Node * Ptr1 = myFirst;
	int number = 0;
	while (Ptr1) {
		if (Ptr1 -> myItem == index) {
			return number;
		}
		number++;
		Ptr1 = Ptr1 -> myNext;
	}
	return -1;
}

/* remove() method - Uses two pointers to iterate through a list and return the item of
 * 		the number removed
 * @param: const Item& -> index
 * @return: Item of index removed and -1, and int
 * Postcondition: Index in list will be removed
 */
template <class Item>
Item List<Item>::remove(const int index) {
	Item temp;
	Node * Ptr1 = myFirst;
	Node * Ptr2;
	if (mySize == 1) {
		temp = myFirst -> myItem;
		delete myFirst;
		myLast = NULL;
		mySize--;
		return temp;
	}
	if (index <= 0) {
		myFirst = Ptr1 -> myNext;
		temp = Ptr1 -> myItem;
		Ptr1 -> myItem = NULL;
		Ptr1 -> myNext = NULL;
		mySize--;
		return temp;
	}
	for (int x = 0; x < index - 1; x++) {
		if (Ptr1 -> myNext == myLast) {
			temp = myLast -> myItem;
			myLast -> myItem = NULL;
			myLast -> myNext = NULL;
			myLast = Ptr1;
			mySize--;
			return temp;
		}
		Ptr1 = Ptr1 -> myNext;
		if (Ptr1 -> myNext == myLast) {
			temp = myLast -> myItem;
			myLast -> myItem = NULL;
			myLast -> myNext = NULL;
			myLast = Ptr1;
			mySize--;
			return temp;
		}
	}
	Ptr2 = Ptr1 -> myNext;
	Ptr1 -> myNext = Ptr2 -> myNext;
	temp = Ptr2 -> myItem;
	Ptr2 -> myItem = NULL;
	Ptr2 -> myNext = NULL;

//	delete Ptr1;
	mySize--;
	return temp;
}

/* sortList() method - Used to split a list into two subsequences and sort the list
 * @param: None
 * @return: *this
 * Precondition: List must be greater than 1
 * Postcondition: List will be sorted
 */
template<class Item>
void List<Item>::sortList() {
   if (mySize > 1){
      List<Item> s1, s2;
      divide(s1, s2);  // split s into s1 and s2
      s1.sortList();            // recursively sort s1
      s2.sortList();            // recursively sort s2
      *this = s1.merge(s2);   // merge the two sorted subsequences
   }                 //  so that s is sorted
}

/* divide() method - Divides the two subsequences
 * @param: List<Item> l1, List<Item> l2
 * Postcondition: List will be effectively sorted
 */
template<class Item>
void List<Item>::divide(List<Item>& l1, List<Item>& l2){
    unsigned j =mySize/2;
    unsigned k = mySize-mySize/2;
    Node * nPtr = myFirst;
    for (unsigned i = 0; i < j; i++){
        l1.append(nPtr -> myItem);
        nPtr=nPtr -> myNext;
    }
    for (unsigned i = j; i < mySize; i++){
        l2.append(nPtr -> myItem);
        nPtr = nPtr -> myNext;
    }
}

/* merge() method - merges the two subsequences of the list together
 * @param: List<Item> v2
 * @return: List<Item>
 */
template<class Item>
List<Item> List<Item>::merge(List<Item>& v2){
    unsigned r = mySize;
    unsigned q = v2.mySize;
    List<Item> v3;
    Node * nPtr1=myFirst;
    Node * nPtr2=v2.myFirst;
    //List<Item> v1 = *this;
    for(unsigned k=0; k<(r+q); k++){
        if(nPtr1==NULL){
            v3.append(nPtr2->myItem);
            nPtr2=nPtr2->myNext;
        } else if(nPtr2==NULL){
            v3.append(nPtr1->myItem);
            nPtr1=nPtr1->myNext;
        } else if(nPtr1->myItem<=nPtr2->myItem){
            v3.append(nPtr1->myItem);
            nPtr1=nPtr1->myNext;
        } else if(nPtr1->myItem>=nPtr2->myItem){
            v3.append(nPtr2->myItem);
            nPtr2=nPtr2->myNext;
        }
    }
    return v3;
}

//Judy wrote this method
/* readFrom(istream) method - fuction for streams
 * @param: an istream to read from
 * Precondition - if mySize is not 0 initialize to zero.
 * Postcondition - the string in the line is read into the list.
 */
template<class Item>
void List<Item>::readFrom(istream& in) {

	if (mySize != 0) { //if list is non-empty, delete content
		delete myFirst;
		myFirst = myLast = NULL;
		mySize = 0;
	}

	Item item = 0;
	while (true) {
		in >> item;
		this->append(item);
		char nextch = in.peek();
		if (nextch == '\n') {
			break;
		}
	}

}

//Judy wrote this method
/* prepend() method - prepends items to the front of the list and increments the size
 * @param: const Item& --> it
 * Precondition - if mySize is 0 myLast = myFirst
 *  				or else myFirst = item ->myFirst will be returned
 * Postcondition - myFirst will = item, myFirst and mySize will be incremented
 */
template <class Item>
void List<Item>::prepend(const Item& item) {
	myFirst = new Node(item, myFirst);
	if (mySize == 0) {
		myLast = myFirst;
	}
	mySize++;
}

//Judy wrote this method
/* writeTo(fileName) method - writes a list to a file
 * @param: const string& -> fileName
 * Postcondition: the list will be written to a file
 */
template <class Item>
void List<Item>::writeTo(const string& fileName) {
	ofstream fout(fileName.c_str()); // open file
	//assert(fout.is_open());
	Node* ptr = myFirst;
	while (ptr) { //while ptr doesn't reach end when myNext is null.
		fout << ptr->myItem << "\n" ; //print myItem
		ptr = ptr->myNext; //move on to next Item through pointer myNext
	}
	fout.close();
}

//Judy wrote this method
/* insert() function for lists.
 * @param: an item to insert, and the index at which it should be inserted.
 *
 * Postcondition: the item in the parameter is inserted at the index specified.
 * The Node Pointer of the term before is set to the address of the new node,
 * and the node pointer of the new node is set to the following node.
 * If the index is at the beginning or the end of the list, myFirst or myLast
 * is updated.
 */


//Judy wrote this method
template<class Item>
void List<Item>::insert(const Item& it, int index) {
	if (mySize == 0) {
		append(it);
	}

	else if (index <= 0) {
		prepend(it);
	}
	else if (index >= mySize) {
		append(it);
	}
	else {
		Node * nodePtr1 = new Node(it, NULL);
		Node * nodePtr2 = myFirst;

		for (int i = 0; i < index; i++) {
			if (i == index -1) {
				nodePtr1->myNext = nodePtr2->myNext;
				nodePtr2->myNext = nodePtr1;
			}
		}
		mySize++;
	}
}


#endif /* LIST_H_ */
/* listTester.cpp defines the test methods for class list.'
 * Student: Zach Wibbenmeyer
 * Date: July 14, 2015
 * Begun By: Joel Adams, for CS 112 at Calvin College.
 */

//Include the necessary modules
#include "ListTester.h" // listTester
#include "List.h"       // list
#include <iostream>     // cin, cout
#include <cassert>      // assert()
#include <cstdlib>      // exit()
#include <stdexcept>    // underflow_error
using namespace std;

typedef double Item;

//Implement all the tests
void ListTester::runTests() {
	cout << "Running list tests..." << endl;
	testDefaultConstructor();
	testNodeDefaultConstructor();
	testNodeExplicitConstructor();
	testAppend();
	testDestructor();
	testCopyConstructor();
	testAssignment();
	testEquality();
	testInequality();
	testWriteToStream();
	testReadFromFile();
	testGetIndexOf();
	testRemove();
	testInsert();
	testPrepend();
//	testReadfromStream();
	testWriteToString();
	testSort();
	cout << "All tests passed!" << endl;
}

//Test the list Default Constructor
void ListTester::testDefaultConstructor() {
	cout << "Testing list default constructor... " << flush;
	List<double> aList;
	assert( aList.mySize == 0 );
	assert( aList.myFirst == NULL );
	assert( aList.myLast == NULL );
	cout << " Passed! " << endl;
}

//Test the Node Default Constructor
void ListTester::testNodeDefaultConstructor() {
	cout << "Testing Node default constructor... " << flush;
	List<double>::Node aNode;
	assert( aNode.myItem == 0 );
	assert( aNode.myNext == NULL );
	cout << "Passed!" << endl;
}

//Test the Node Explicit Constructor
void ListTester::testNodeExplicitConstructor() {
	cout << "Testing Node explicit constructor... " << flush;
	List<double>::Node n1(11, NULL);
	assert( n1.myItem == 11 );
	assert( n1.myNext == NULL );
	cout << " 1 " << flush;

	List<double>::Node *n3 = new List<double>::Node(33, NULL);
	List<double>::Node n2(22, n3);
	assert( n2.myItem == 22 );
	assert( n2.myNext == n3 );
	cout << " 2 " << flush;
	cout << "Passed!" << endl;
}

//Test the Append method
void ListTester::testAppend() {
	cout << "Testing append()... " << flush;
	// empty list
	List<double> aList;
	assert( aList.getSize() == 0 );
	assert( aList.myFirst == NULL );
	assert( aList.myLast == NULL );
	try {
		aList.getFirst();
		cerr << "getFirst() worked on empty list" << endl;
		exit(1);
	} catch (underflow_error&) {
		cout << " 0a " << flush;
	}
	try {
		aList.getLast();
		cerr << "getLast() worked on empty list" << endl;
		exit(1);
	} catch (underflow_error&) {
		cout << " 0b " << flush;
	}
	// append to empty list
	aList.append(11);
	assert( aList.getSize() == 1 );
	assert( aList.myFirst != NULL );
	assert( aList.myLast == aList.myFirst );
	assert( aList.getFirst() == 11 );
	assert( aList.getLast() == 11 );
	assert( aList.myFirst->myNext == NULL );
	cout << " 1 " << flush;
	// append to a list containing 1 Item
	aList.append(22);
	assert( aList.getSize() == 2 );
	assert( aList.myFirst != NULL );
	assert( aList.myLast != NULL );
	assert( aList.myFirst != aList.myLast );
	assert( aList.getFirst() == 11 );
	assert( aList.getLast() == 22 );
	assert( aList.myFirst->myNext != NULL );
	assert( aList.myLast->myNext == NULL );
	cout << " 2 " << flush;
	// append to a list containing 2 Items
	aList.append(33);
	assert( aList.getSize() == 3 );
	assert( aList.myFirst != NULL );
	assert( aList.myLast != NULL );
	assert( aList.getFirst() == 11 );
	assert( aList.getLast() == 33 );
	assert( aList.myFirst->myNext->myItem == 22 );
	assert( aList.myLast->myNext == NULL );
	cout << " 3 " << flush;
	cout << "Passed!" << endl;
}

//Test the list Destructor
void ListTester::testDestructor() {
	cout << "Testing destructor... " << flush;
	List<double> aList;
	aList.~List();
	assert( aList.getSize() == 0 );
	assert( aList.myFirst == NULL );
	assert( aList.myLast == NULL );
	cout << " 1 " << flush;

	aList.append(11);
	aList.append(22);
	aList.append(33);
	aList.~List();
	assert( aList.getSize() == 0 );
	assert( aList.myFirst == NULL );
	assert( aList.myLast == NULL );
	cout << " 2 " << flush;
	cout << "Passed!  But double-check for memory leaks!" << endl;
}

//Test the Copy Constructor
void ListTester::testCopyConstructor() {
	cout << "Testing copy constructor... " << flush;
	// copy empty list
	List<double> list1;
	List<double> list2(list1);
	assert( list2.getSize() == 0 );
	assert( list2.myFirst == NULL );
	assert( list2.myLast == NULL );
	cout << " 1 " << flush;
	// copy nonempty list
	List<double> list3;
	list3.append(11);
	list3.append(22);
	list3.append(33);
	List<double> list4(list3);
	assert( list4.getSize() == 3 );
	assert( list4.getFirst() == 11 );
	assert( list4.getLast() == 33 );
	assert( list4.myFirst->myNext->myItem == 22 );
	assert( list4.myFirst != list3.myFirst );
	assert( list4.myLast != list3.myLast );
	cout << " 2 " << flush;
	cout << "Passed!" << endl;
}

//Test the Assignment Operator
void ListTester::testAssignment() {
	cout << "Testing assignment... " << flush;
	// empty to empty assignment
	List<double> list1;
	List<double> list2;
	list2 = list1;
	assert( list2.getSize() == 0 );
	assert( list2.myFirst == NULL );
	assert( list2.myLast == NULL );
	cout << " 1 " << flush;

	// non-empty to empty assignment
	List<double> list3;
	list3.append(11);
	list3.append(22);
	list3.append(33);
	List<double> list4;
	list4 = list3;
	assert( list4.getSize() == 3 );
	assert( list4.getFirst() == 11 );
	assert( list4.getLast() == 33 );
	assert( list4.myFirst->myNext->myItem == 22 );
	cout << " 2 " << flush;

	// equal-sized non-empty to non-empty assignment
	List<double> list5;
	list5.append(44);
	list5.append(55);
	list5.append(66);
	list5 = list3;
	assert( list5.getSize() == 3 );
	assert( list5.getFirst() == 11 );
	assert( list5.getLast() == 33 );
	assert( list5.myFirst->myNext->myItem == 22 );
	cout << " 3 " << flush;

	// empty to non-empty assignment
	List<double> list6;
	list6.append(44);
	list6.append(55);
	list6.append(66);
	List<double> list7;
	list6 = list7;
	assert( list6.getSize() == 0 );
	assert( list6.myFirst == NULL );
	assert( list6.myLast == NULL );
	cout << " 4 " << flush;

	// unequal-sized non-empty to non-empty assignment
	List<double> list8;
	list8.append(44);
	list8.append(55);
	list8.append(66);
	list8.append(77);
	list8 = list3;
	assert( list8.getSize() == 3 );
	assert( list8.getFirst() == 11 );
	assert( list8.getLast() == 33 );
	assert( list8.myFirst->myNext->myItem == 22 );
	cout << " 5 " << flush;

	// assignment chaining
	List<double> list9;
	list9.append(44);
	list9.append(55);
	list9.append(66);
	list9.append(77);
	List<double> list10;
	list10 = list9 = list8;
	assert( list10.getSize() == 3 );
	assert( list10.getFirst() == 11 );
	assert( list10.getLast() == 33 );
	assert( list10.myFirst->myNext->myItem == 22 );
	cout << " 6 " << flush;

	// self-assignment (stupid, but possible)
	List<double> list11;
	list11.append(11);
	list11.append(22);
	list11.append(33);
	list11 = list11;
	assert( list11.getSize() == 3 );
	assert( list11.getFirst() == 11 );
	assert( list11.getLast() == 33 );
	assert( list11.myFirst->myNext->myItem == 22 );
	cout << " 7 " << flush;

	cout << "Passed!  But double-check for memory leaks!" << endl;
}

void ListTester::testInequality() {
	cout << "Testing inequality..." << flush;
	//Two empty lists
	List<double> list1;
	List<double> list2;
	assert( !(list1 != list2) );
	cout << " 1 " << flush;

	//non-empty list
	List<double> list3;
	list3.append(11);
	assert( list3 != list1 );
	assert( list3 != list2 );
	assert( list2 != list3 );
	assert( list1 != list3 );
	cout << " 2 " << flush;

	//equal, non-empty list of same size
	List<double> list4;
	list4.append(11);
	assert( list4 != list1 );
	assert( list4 != list2 );
	assert( list2 != list4 );
	assert( list1 != list4 );
	assert( !(list3 != list4) );
	assert( !(list4 != list3) );
	cout << " 3 " << flush;

	//non-empty list of bigger size
	List<double> list5;
	list5.append(11);
	list5.append(22);
	assert( list5 != list3 );
	assert( list5 != list4 );
	assert( list4 != list5 );
	assert( list3 != list5 );
	assert( list5 != list1 );
	assert( list5 != list2 );
	cout << " 4 " << flush;

	List<double> list6;
	list6.append(11);
	list6.append(22);
	assert( !(list6 != list5) );
	cout << " 5 " << flush;

	list6.append(33);
	assert( list6 != list5 );
	assert( list5 != list6 );
	cout << " 6 " << flush;

	list1.append(22);
	assert( list1 != list3 );
	assert( list3 != list1 );
	cout << " 7 " << flush;

	cout << " Passed! " << endl;
}

//Test WriteToStream method
void ListTester::testWriteToStream() {
	cout << "Testing writeTo(ostream)..." << flush;
	List<double> list;
	list.readFrom("list1.txt");
	ofstream fout("list1Copy.txt");
	assert( fout.is_open() );
	list.writeTo(fout);
	fout.close();
	List<double> list2;
	List<double> list3;
	list2.readFrom("list1Copy.txt");
	assert( list2.getSize() == 5);
	list3.append(1);
	list3.append(2);
	list3.append(3);
	list3.append(4);
	list3.append(5);
	assert( list2 == list3 );
	cout << " Passed! " << endl;
}

//Test readFrom(fileName) method
void ListTester::testReadFromFile() {
	cout << "Testing readFrom(string)..." << flush;
	List<double> list;
	List<double> list2;
	list.readFrom("list1.txt");
	assert( list.getSize() == 5 );
	cout << " 1 " << flush;
	list2.append(1);
	list2.append(2);
	list2.append(3);
	list2.append(4);
	list2.append(5);
	assert( list == list2);
	cout << " 2 " << flush;
	cout << " Passed! " << endl;
}

// test getIndexOf() method
void ListTester::testGetIndexOf() {
	cout << "Testing getIndexOf(Item)..." << flush;
	List<double> list1;
	List<double> list2;
	list1.append(3);
	list1.append(7);
	list1.append(10);
	list2.append(2);
	list2.append(4);
	list2.append(6);
	assert( list1 != list2 );
	cout << " 1 " << flush;
	assert( list1.getIndexOf(3) == 0 );
	assert( list1.getIndexOf(7) == 1 );
	assert( list1.getIndexOf(10) == 2 );
	assert( list2.getIndexOf(2) == 0 );
	assert( list2.getIndexOf(4) == 1 );
	assert( list2.getIndexOf(6) == 2 );
	cout << " 2 " << flush;
	cout << " Passed! " << endl;
}

// Test remove() method
void ListTester::testRemove() {
	cout << "Testing remove(Item)..." << flush;
	List<double> list;
	list.append(11);
	list.append(22);
	list.append(33);
	list.append(44);
	list.append(55);
	list.append(66);
	list.append(77);
	assert( list.getSize() == 7 );
	assert( list.remove(0) == 11 );
	assert( list.getIndexOf(11) == -1 );
	cout << " 1 " << flush;
	assert( list.remove(1) == 33 );
	assert( list.getIndexOf(33) == -1 );
	cout << " 2 " << flush;
	assert( list.getIndexOf(22) != -1 );
	cout << " 3 " << flush;
	assert( list.getIndexOf(22) == 0 );
	cout << " 4a " << flush;
	assert( list.getIndexOf(55) == 2 );
	cout << " 4b " << flush;
	assert( list.remove(-1) == 22 );
	assert( list.getIndexOf(22) == -1 );
	cout << " 5 " << flush;
	assert( list.getIndexOf(44) == 0 );
	cout << " 6 " << flush;
	assert( list.remove(3) == 77 );
	assert( list.getLast() == 66 );
	cout << " 7 " << flush;
	assert( list.remove(3) == 66 );
	assert( list.getLast() == 55 );
	assert( list.getSize() == 2 );
	cout << " 8 " << flush;
	assert( list.remove(4) == 55 );
	assert( list.getLast() == 44 );
	cout << " 9 " << flush;
	cout << " Passed! " << endl;
}

// Test the sort() method
void ListTester::testSort() {
	cout << "Testing the Sort method..." << flush;
	List<double> list1;
	list1.append(2);
	list1.append(4);
	list1.append(7);
	list1.append(5);
	list1.append(8);
	list1.append(3);
	list1.append(6);
	list1.append(1);
	list1.sortList();
	assert( list1.getFirst() == 1 );
	cout << " 1 " << flush;
	assert( list1.getLast() == 8 );
	cout << " 2 " << flush;
	assert( list1.getIndexOf(2) == 1 );
	cout << " 3 " << flush;
	assert( list1.getIndexOf(7) == 6 );
	cout << " 4 " << flush;
	assert( list1.getIndexOf(3) == 2 );
	cout << " 5 " << flush;
	assert( list1.getIndexOf(6) == 5 );
	cout << " 6 " << flush;
	assert( list1.getIndexOf(4) == 3 );
	cout << " 7 " << flush;
	assert( list1.getIndexOf(5) == 4 );
	cout << " 8 " << flush;
	cout << " Passed! " << endl;
}

//Judy wrote this test
void ListTester::testReadfromStream() {
	cout << "Testing ReadfromStream..." << flush;
	//reading to an empty string
	List<double> list1; //create list
	ifstream fin("list1.txt"); //read text file
	list1.readFrom(fin);
	assert( list1.getSize() == 5);
	cout << " 0 " << flush;

	List<double> list2;
	list2.append(1);
	list2.append(2);
	list2.append(3);
	list2.append(4);
	list2.append(5);

	assert(list1 == list2);

	cout << " 1 " << flush;


	cout << " Passed! " << endl;


}

void ListTester::testEquality() {
	cout << "Testing equality... " << flush;
	// two empty lists
	List<double> list1;
	List<double> list2;
	assert( list1 == list1 );
	cout << " 1 " << flush;

	// a non-empty list
	List<double> list3;
	list3.append(33);		// [33]
	assert( !(list3 == list1) );
	cout << " 2 " << flush;

	// equal, non-empty lists of the same size
	List<double> list4;
	list4.append(33);		// [33]
	assert( list4 == list3 );
	assert( list3 == list4 );
	cout << " 3 " << flush;

	// unequal, non-empty lists of the same size
	list3.append(55);		// [33,55]
	List<double> list5;
	list5.append(44);		// [44]
	list5.append(55);		// [44,55]
	assert( !(list5 == list3) );
	assert( !(list3 == list5) );
	cout << " 4 " << flush;

	// unequal non-empty lists of different sizes
	list4.append(44);		// [33,44]
	list4.append(55);		// [33,44,55]
	assert( !(list4 == list5) );
	assert( !(list5 == list4) );
	assert( !(list5 == list3) );
	cout << " 5 " << flush;

	cout << "Passed!" << endl;
}



void ListTester::testWriteToString() {
	cout << "testing writeToString ..." << flush;
	ofstream fout("testwriteToString.txt");
	assert( fout.is_open() );
	List<double >list1;
	list1.append(11);
	list1.append(22);
	list1.append(33);
	list1.writeTo(fout);

	cout << " 0 " << flush;

	assert( list1.getIndexOf(11) == 0 );
	assert( list1.getIndexOf(22) == 1 );
	assert( list1.getIndexOf(33) == 2 );
	cout << " 1 " << flush;

	cout << " Passed! " << endl;
}
void ListTester::testPrepend() {
	cout << "Testing prepend... " << flush;
	List<double> list1;
	list1.prepend(10);
	assert( list1.getSize() == 1 );
	assert( list1.myFirst != NULL );
	assert( list1.myLast != NULL );
	assert( list1.myFirst == list1.myLast );
	assert( list1.myFirst->myItem == 10 );
	assert( list1.myLast->myNext == NULL );
	cout << " 0 " << flush;

	list1.prepend(11);
	assert( list1.getSize() == 2 );
	assert( list1.myFirst != NULL );
	assert( list1.myLast != NULL );
	assert( list1.myFirst != list1.myLast );
	assert( list1.myFirst->myItem == 11 );
	assert( list1.myFirst->myNext == list1.myLast);
	assert( list1.myLast->myItem == 10 ); //the one we prepended first
	assert( list1.myLast->myNext == NULL );
	cout << " 1 " << flush;

	list1.prepend(12);
	assert( list1.getSize() == 3 );
	assert( list1.myFirst != NULL );
	assert( list1.myLast != NULL );
	assert( list1.myFirst != list1.myLast );
	assert( list1.myFirst->myItem == 12 );
	assert( list1.myFirst->myNext != list1.myLast);
	assert( list1.myFirst->myNext->myItem == 11 );
	assert( list1.myFirst->myNext->myNext == list1.myLast);
	assert( list1.myLast->myItem == 10 );
	assert( list1.myLast->myNext == NULL );
	cout << " 2 " << flush;

	cout << " Passed! " << endl;
}

void ListTester::testInsert() {
	cout << "testing Insert() ..." << flush;
	List<double> list1;
	list1.readFrom("list1.txt");
	list1.insert(0,1);

	cout << " 0 " << flush;

	assert( list1.getIndexOf(1) == 0 );
	assert( list1.getIndexOf(0) == 1 );
	assert( list1.getIndexOf(2) == 2 );
	assert( list1.getIndexOf(3) == 3 );
	assert( list1.getIndexOf(4) == 4 );
	assert( list1.getIndexOf(5) == 5 );

	cout << " 1 " << flush;
	cout << " Passed ! " << endl;

}
/* ListTester.h declares the test-class for class List.
 * Joel Adams, for CS 112 at Calvin College.
 */

using namespace std;

#ifndef LISTTESTER_H_
#define LISTTESTER_H_

//Create a class ListTester
class ListTester {
public:
	//Implement all the tests
	void runTests();
	void testDefaultConstructor();
	void testNodeDefaultConstructor();
	void testNodeExplicitConstructor();
	void testAppend();
	void testDestructor();
	void testCopyConstructor();
	void testAssignment();
	void testEquality();
	void testInequality();
	void testWriteToStream();
	void testReadFromFile();
	void testGetIndexOf();
	void testRemove();
	void testInsert();
	void testPrepend();
	void testReadfromStream();
	void testWriteToString();
	void testSort();
};

#endif /*LISTTESTER_H_*/
/* tester.cpp
 * Joel Adams, for CS 112 at Calvin College.
 */

//Include the necessary modules
#include "ListTester.h"
#include "VecTester.h"

// Main program
int main() {
	//Implement the tests
	ListTester lt;
	lt.runTests();
	VecTester vt;
	vt.runTests();
}
/* Vec.h provides a simple vector class named Vec.
 * Student Name: Zach Wibbenmeyer
 * Date: June 22, 2015
 * Begun by: Joel C. Adams, for CS 112 at Calvin College.
 */

#ifndef VEC_H_
#define VEC_H_

//Include the necessary modules
#include <iostream>
#include <cstdlib>
#include <stdexcept>
#include <fstream>
using namespace std;

template <class Item>

//Create a class for the Vec source file
class Vec {
public:
	//Implement all the methods
	Vec();
	virtual ~Vec();
	Vec(unsigned size);
	Vec(const Vec& original);
	Vec& operator=(const Vec& original);
	unsigned getSize() const;
	void setItem(unsigned index, const Item& it);
	Item getItem(unsigned index) const;
	void setSize(unsigned newSize);
	bool operator==(const Vec& v2) const;
	void writeTo(ostream& out) const;
	void readFrom(istream& in);
	const Item& operator[](unsigned index) const;
	Item& operator[](unsigned index);
	bool operator!=(const Vec& v2) const;
	void writeTo(const string& fileName) const;
	Vec operator+(const Vec& v2) const;
	double operator*(const Vec& v2) const;
	Vec operator-(const Vec& v2) const;
	void readFrom(const string& fileName);
private:
	unsigned mySize;
	Item * myArray;
	friend class VecTester;
};

/* Vec() method, sets the default constructors
 * Postcondition: the vectors will now have default constructors
 */
template <class Item>
Vec<Item>::Vec() {
	mySize = 0;
	myArray = NULL;
}

/* Destructor() method - clears any memories of arrays
 * Postcondition: Memories of arrays will be cleared
 */
template <class Item>
Vec<Item>::~Vec() {
	delete [] myArray;
	myArray = NULL;
	mySize = 0;
}

/* ExplicitValue method - Tests for explicit values in vectors and arrays
 * @param: unsigned --> size
 * Precondition: Arrays must be assigned values in the tests
 * Postcondition: Arrays will be checked for explicit values
 */
template <class Item>
Vec<Item>::Vec(unsigned size) {
	mySize = size;
	myArray = new Item[mySize];
	for (unsigned x = 0; x < size; x++) {
		myArray[x] = 0;
	}
}

/* CopyConstructor method - copies the values of original into myArray
 * @param: Vec& --> original
 * Postcondition: values from original will be copied into newArray and
 * 		myArray will be set to NULL
 */
template <class Item>
Vec<Item>::Vec(const Vec& original) {
	mySize = original.mySize;
	if (original.mySize > 0) {
		myArray = new Item[mySize];
		for (unsigned x = 0; x < original.mySize; x++) {
			myArray[x] = original.myArray[x];
		}
	}
	else {
		myArray = NULL;
	}

}

/* AssignmentOperator - Makes v2 a copy of v1, overwriting any previous values
 * 		v2 held.  Where the copy constructor returns nothing, the assignment
 * 		operator will return the object to the left of the -sign.
 * 		Deallocates myArray
 * 	@param: Vec& --> original
 */
template <class Item>
Vec<Item>& Vec<Item>::operator=(const Vec<Item>& original) {
	if (this != &original) {
		if (mySize != original.mySize) {
			if (mySize > 0) {
				delete [] myArray;
				myArray = NULL;
			}
			if (original.mySize > 0) {
				myArray = new Item[original.mySize];
			}
			mySize = original.mySize;
		}
		for (unsigned x = 0; x < original.mySize; x++) {
			myArray[x] = original.myArray[x];
		}
	}
	return *this;
}

// getSize() method - returns the value of mySize
template <class Item>
unsigned Vec<Item>::getSize() const {
	return mySize;
}

/* setItem() method - if index is less than mySize, sets the indexes of myArray
 * 		to it.  Otherwise, throws an exception.
 * 	@param: unsigned --> index, Item& --> it
 */
template <class Item>
void Vec<Item>::setItem(unsigned index, const Item& it) {
	if (index < mySize) {
		myArray[index] = it;
	}
	else {
		throw std::range_error("Your index is out of range!");
	}
}

/* getItem() method - if index is less than mySize, returns the indexes of
 * 		myArray.  Otherwise, throws an exception.
 * @param: unsigned --> index
 */
template <class Item>
Item Vec<Item>::getItem(unsigned index) const {
	if (index < mySize) {
		return myArray[index];
	}
	else {
		throw std::range_error("Your index is out of range!");
	}
}

/* setSize() method - sets the Vectors size.  Changes the size of the existing
 * 		vector to a new size.
 * @param: unsigned --> newSize
 */
template <class Item>
void Vec<Item>::setSize(unsigned newSize) {
	if (mySize != newSize) {
		if (newSize == 0) {
			delete [] myArray;
			myArray = NULL;
			mySize = 0;
		}
		else {
			Item * newArray;
			newArray = new Item[newSize];
			if (mySize < newSize) {
				for (unsigned x = 0; x < mySize; x++) {
					newArray[x] = myArray[x];
				}
				for (unsigned x = mySize; x < newSize; x++) {
					newArray[x] = 0;
				}

			}
			else {
				for (unsigned x = 0; x < newSize; x++) {
					newArray[x] = myArray[x];
				}
			}
			mySize = newSize;
			delete [] myArray;
			myArray = newArray;
		}
	}
}

/* Equality operator - Compares two objects and returns true if they are equal,
 * 		false if they are not.
 * @param: Vec& --> v2
 */
template <class Item>
bool Vec<Item>::operator==(const Vec<Item>& v2) const {
	if (mySize != v2.mySize) {
		return false;
	}
	for (unsigned x = 0; x < mySize; x++) {
		if (myArray[x] != v2.myArray[x]) {
			return false;
		}
	}
	return true;
}

/* writeTo() method - Writes a vector to an ostream and displays it on the screen
 * @param: ostream& --> out
 * Precondition: Ostream must be opened
 * PostCondition: Vectors will be displayed on the screen
 */
template <class Item>
void Vec<Item>::writeTo(ostream& out) const {
	for (unsigned x = 0; x < mySize; x++) {
		out << myArray[x] << "\n\t";
	}
}

/* readFrom() method - reads vector from an istream and lets the user enter values
 * @param: istream& --> in
 * Precondition: Stream must be opened
 * Postcondition: User can write values into the vector using the stream
 */
template <class Item>
void Vec<Item>::readFrom(istream& in) {
	for (unsigned x = 0; x < mySize; x++) {
		in >> myArray[x];
	}
}

//Write version
//Zach wrote this method
/* operator[] writes the value at the specified index from the Vector
 * @param: unsigned --> index
 * @return: myArray[index]
 */
template <class Item>
Item& Vec<Item>::operator[](unsigned index) {
	return myArray[index];
}

//Read version
//Tammie wrote this method
/* operator[] reads the value at the specified index from the Vector.
 * @param: unsigned --> index
 * @return: myArray[index]
 */
template <class Item>
const Item& Vec<Item>::operator[](unsigned index) const {
	return myArray[index];
}

//Zach wrote this method
/* writeTo() method to write the size and values of each array in the vector
 * 		class
 * @param: string --> fileName
 */
template <class Item>
void Vec<Item>::writeTo(const string& fileName) const {
	ofstream fout(fileName.c_str());
	fout << mySize << endl;
	this -> writeTo(fout);
	fout.close();
}

//Zach wrote this method
/* operator+() adds the values in each array if they are the same size
 * @param: const Vec& --> v2 and "this" vector
 * @return: The added vectors if they are the same size, if not, throws
 * 		an invalid argument
 */
template <class Item>
Vec<Item> Vec<Item>::operator+(const Vec<Item>& v2) const {
	if (mySize != v2.mySize) {
		throw std::invalid_argument("Vectors are not of the same size");
	}
	else {
		Vec<Item> v3(mySize);
		for (unsigned x = 0; x < mySize; x++) {
			v3[x] = (*this)[x] + v2[x];
		}
		return v3;
	}
}

//Zach and Tammie wrote this method
/*operator* computes the dot product of two vectors if their sizes are equal
 * @param: const Vec& --> v2, and "this" vector
 * @return: a double "dProd"
 */
template <class Item>
double Vec<Item>::operator*(const Vec<Item>& v2) const {
	if (mySize != v2.mySize) {
		throw std::invalid_argument("Vectors are not of the same size");
	}
	else {
		double dProd = 0;
		for (unsigned x = 0; x < mySize; x++) {
			dProd = dProd + (((*this)[x]) * v2[x]);
		}
		return dProd;
	}
}

/*Written by Tammie Thong
 * This inequality compares two vectors and returns a bool T/F.
 * It checks if they are empty arrays and if so, return false. Next, it compares the sizes, if they're not the same, it returns true.
 * If the sizes are the same it compares each element in the array and returns false if they're exactly the same. IF they're not the same it true.
 * @param: const Vec& v2
 * @return: boolean value
 *
 */
template <class Item>
bool Vec<Item>::operator!=(const Vec<Item>& v2) const {
	if (mySize == 0 && v2.mySize == 0) {
		return false;
	}
	else if (mySize != v2.mySize) {
		return true;
	}
	else {
		for (unsigned i = 0; i < mySize; i++) {
			if (myArray[i] == v2.myArray[i]) {
				return false;
			}
		}
		return true;
	}
	return false;
}

/*
 * Written by Tammie Thong
 * minus operator subtracts the value of elements at the same index in Vec v1 and Vec v2 and returns the new Vec v3
 * @param: const Vec& v2
 * @return : v3
 */
template <class Item>
Vec<Item> Vec<Item>::operator-(const Vec<Item>& v2) const {
	if (mySize != v2.mySize) {
		throw std::invalid_argument("Vectors are not of the same size");
	}
	else {
		Vec<Item> v3(mySize);
		for (unsigned i = 0; i < mySize; i++) {
			v3.myArray[i] = myArray[i]-v2.myArray[i];
		}
		return v3;
	}
}

/* written by Tammie Thong
 * readFrom method fills v3 with values stored in fileName.
 * @param:  const string& fileName
 *
 */
template <class Item>
void Vec<Item>::readFrom(const string& fileName) {
	ifstream fin(fileName.c_str());
	fin >> mySize;
	myArray = new Item[mySize];
	this -> readFrom(fin);
	fin.close();
}

#endif /*VEC_H_*/
/* VecTester.cpp defines the unit test-methods for Vec, a simple vector class.
 * Student Name:
 * Date:
 * Begun by: Joel C. Adams, for CS 112 at Calvin College.
 */
 
#include "VecTester.h"
#include <iostream>     // cout, cerr, ...
#include <cassert>      // assert()
#include <cstdlib>      // exit()
#include <stdexcept>    // range_error, ...
using namespace std;

void VecTester::runTests() const {
	cout << "Testing class Vec" << endl;
	testDefaultConstructor();
	testExplicitConstructor();
	testCopyConstructor();
	testDestructor();
	testAssignment();
	testSetSize();
	testGetSize();
	testSetItem();
	testGetItem();
	testEquality();
	testWriteToStream();
	testReadFromStream();
	testInequality();
	testAddition();
	testSubtraction();
	testDotProduct();
	testReadFromFile();
	testWriteToFile();
	cout << "All tests passed!" << endl;
}

void VecTester::testDefaultConstructor() const {
	cout << "Testing default constructor... " << flush;
	Vec<double> v;
	assert( v.mySize == 0 );
	assert( v.myArray == NULL );
	cout << "Passed!" << endl;
}

void VecTester::testExplicitConstructor() const {
	cout << "Testing explicit constructor... " << flush;
	cout << " 1 " << flush;
	Vec<double> v1(3);
	assert( v1.mySize == 3 );
	assert( v1.myArray != NULL );
	for (int i = 0; i < 3; i++) {
		assert( v1.myArray[i] == 0 );
	}
	cout << " 2 " << flush;
	Vec<double> v2(8);
	assert( v2.mySize == 8 );
	assert( v2.myArray != NULL );
	for (int i = 0; i < 8; i++) {
		assert( v2.myArray[i] == 0 );
	}
	cout << "Passed!" << endl;
}

void VecTester::testCopyConstructor() const {
	cout << "Testing copy constructor..." << flush;
	cout << " 1 " << flush;
	Vec<double> v1;
	Vec<double> v2(v1);
	assert( v2.mySize == 0 );
	assert( v2.myArray == NULL);

	cout << " 2 " << flush;
	Vec<double> v3(5);
	Vec<double> v4(v3);
	assert(v4.mySize == 5);
	assert(v4.myArray != NULL);
	assert(v4.myArray != v3.myArray);
	for (unsigned i = 0; i < 5; i++) {
		assert( v4.myArray[i] == 0 );
	}

	cout << " 3 " << flush;
	Vec<double> v5(5);
	for (unsigned i = 0; i < 5; i++) {
		v5.myArray[i] = (i+1);
	}
	Vec<double> v6(v5);
	assert( v6.mySize == 5 );
	assert( v6.myArray != NULL );
	assert( v6.myArray != v5.myArray );
	for (unsigned i = 0; i < 5; i++) {
		assert( v6.myArray[i] == v5.myArray[i] );
	}
	cout << "Passed!" << endl;
}

void VecTester::testDestructor() const {
	cout << "Testing destructor... " << flush;
	Vec<double> v(5);
	v.~Vec();
	assert( v.mySize == 0 );
	assert( v.myArray == NULL );
	cout << "Passed, but make sure ~Vec() is returning the array's memory to the system!" << endl;
}

void VecTester::testAssignment() const {
	cout << "Testing =..." << flush;
	// empty-to-empty
	Vec<double> v, v0;
	v = v0;
	assert(v.mySize == 0);
	assert(v.myArray == NULL);
	cout << " 0 " << flush;
	// empty-to-nonempty
	Vec<double> v1;
	Vec<double> v2(5);
	v2 = v1;
	assert(v2.mySize == 0);
	assert(v2.myArray == NULL);
	cout << " 1 " << flush;
	// nonempty-to-empty
	Vec<double> v3(5);
	for (unsigned i = 0; i < 5; i++) {
		v3.myArray[i] = (i+1);
	}
	Vec<double> v4;
	v4 = v3;
	assert( v4.mySize == 5 );
	assert( v4.myArray != v3.myArray );
	for (unsigned i = 0; i < 5; i++) {
		assert( v4.myArray[i] == (i+1) );
	}
	cout << " 2 " << flush;
	// nonempty-to-nonempty (larger into smaller)
	Vec<double>  v5(2);
	for (unsigned i = 0; i < 2; i++) {
		v5.myArray[i] = (i+1)*10;
	}
	v5 = v3;
	assert(v5.mySize == 5);
	assert(v5.myArray != v3.myArray);
	for (unsigned i = 0; i < 5; i++) {
		assert( v5.myArray[i] == (i+1) );
	}
	cout << " 3 " << flush;
	// nonempty-to-nonempty (smaller into larger)
	Vec<double>  v6(7);
	for (unsigned i = 0; i < 7; i++) {
		v6.myArray[i] = (i+1)*10;
	}
	v6 = v3;
	assert(v6.mySize == 5);
	assert(v6.myArray != v3.myArray);
	for (unsigned i = 0; i < 5; i++) {
		assert( v6.myArray[i] == (i+1) );
	}
	cout << " 4 " << flush;
	// nonempty-to-nonempty (equal sized)
	Vec<double>  v7(5);
	for (unsigned i = 0; i < 5; i++) {
		v7.myArray[i] = (i+1)*10;
	}
	v7 = v3;
	assert(v7.mySize == 5);
	assert(v7.myArray != v3.myArray);
	for (unsigned i = 0; i < 5; i++) {
		assert( v7.myArray[i] == (i+1) );
	}
	cout << " 5 " << flush;
	// assignment chaining
	Vec<double>  v8;
	Vec<double>  v9(4);
	v9 = v8 = v3;
	assert( v9.mySize == 5 );
	assert( v9.mySize == 5 );
	assert( v8.myArray != v3.myArray );
	assert( v8.myArray != v3.myArray );
	assert( v9.myArray != v8.myArray );
	for (unsigned i = 0; i < 5; i++) {
		assert( v8.myArray[i] == (i+1) );
		assert( v9.myArray[i] == (i+1) );
	}
	cout << " 6 " << flush;
	// self-assignment (idiotic but legal)
	v3 = v3;
	assert( v3.mySize == 5 );
	assert( v3.myArray != NULL );
	for (unsigned i = 0; i < 5; i++) {
		assert(v3.myArray[i] == (i+1) );
	}
	cout << " 7 " << flush;
	cout << "Passed!" << endl;
}

void VecTester::testSetSize() const {
	cout << "Testing setSize()..." << flush;
	// empty
	Vec<double>  v0;
	v0.setSize(3);
	assert( v0.getSize() == 3 );
	for (unsigned i = 0; i < 3; i++) {
		assert( v0.getItem(i) == 0 );
	}
	cout << " 0 " << flush;
	// non-empty, increasing
	Vec<double>  v1(5);
	for (unsigned i = 0; i < 5; i++) {
		v1.setItem(i, i+1);
	}
	v1.setSize(8);
	assert( v1.getSize() == 8 );
	for (unsigned i = 0; i < 5; i++) {
		assert( v1.getItem(i) == (i+1) );
	}
	for (unsigned i = 5; i < 8; i++) {
		assert( v1.getItem(i) == 0 );
	}
	cout << " 1 " << flush;
	// non-empty, decreasing
	Vec<double>  v2(5);
	for (unsigned i = 0; i < 5; i++) {
		v2.setItem(i, i+1);
	}
	v2.setSize(3);
	assert( v2.getSize() == 3 );
	for (unsigned i = 0; i < 3; i++) {
		assert( v2.getItem(i) == (i+1) );
	}
	cout << " 2 " << flush;
	// non-empty, equal
	Vec<double>  v3(5);
	for (unsigned i = 0; i < 5; i++) {
		v3.setItem(i, i+1);
	}
	v3.setSize(5);
	assert( v3.getSize() == 5 );
	for (unsigned i = 0; i < 5; i++) {
		assert( v3.getItem(i) == (i+1) );
	}
	cout << " 3 " << flush;
	// set size to zero
	v3.setSize(0);
	assert( v3.getSize() == 0 );
	assert( v3.myArray == NULL );
	cout << " 4 " << flush;
	cout << "Passed!" << endl;
}

void VecTester::testGetSize() const {
	cout << "Testing getSize()..." << flush;
	Vec<double>  v1;
	assert( v1.getSize() == 0 );
	cout << " 1 " << flush;
	Vec<double>  v2(5);
	assert( v2.getSize() == 5 );
	cout << " 2 " << flush;
	cout << "Passed!" << endl;
}

void VecTester::testSetItem() const {
	cout << "Testing setItem()... " << flush;
	// empty case
	Vec<double>  v0;
	try {
		v0.setItem(0, 11);
		cerr << "setItem() succeeded on empty Vec";
		exit(1);
	} catch (range_error&) {
		cout << " 0 " << flush;
	}
	// nonempty case, valid subscript
	Vec<double>  v(5);
	for (unsigned i = 0; i < 5; i++) {
		v.setItem(i, i+1);
	}
	for (unsigned i = 0; i < 5; i++) {
		assert( v.myArray[i] == (i+1) );
	}
	cout << " 1 " << flush;
	// nonempty case, invalid subscript
	Vec<double>  v2(3);
	try {
		v2.setItem(3, 33);
		cerr << "setItem() succeeded beyond end of Vec";
		exit(1);
	} catch (range_error&) {
		cout << " 2 " << flush;
	}
	cout << "Passed!" << endl;
}

void VecTester::testGetItem() const {
	cout << "Testing getItem()... " << flush;
	// empty Vec
	Vec<double>  v0;
	try {
		v0.getItem(0);
		cerr << "getItem() succeeded on empty Vec";
		exit(1);
	} catch (range_error&) {
		cout << " 0 " << flush;
	}
	// non-empty, valid access
	Vec<double>  v(5);
	for (unsigned i = 0; i < 5; i++) {
		v.setItem(i, i+1);
	}
	for (unsigned i = 0; i < 5; i++) {
		assert( v.getItem(i) == (i+1) );
	}
	cout << " 1 " << flush;
	// nonempty Vec, invalid index
	Vec<double>  v2(3);
	try {
		v2.getItem(3);
		cerr << "getItem() succeeded beyond end of Vec";
		exit(1);
	} catch (range_error&) {
		cout << " 2 " << flush;
	}
	cout << "Passed!" << endl;
}


void VecTester::testEquality() const {
	cout << "Testing ==..." << flush;
	// empty case
	Vec<double>  v1;
	Vec<double>  v2;
	assert( v1 == v2 );
	cout << " 1 " << flush;
	// nonempty, same size, default values
	Vec<double>  v3(5);
	Vec<double>  v4(5);
	assert( v3 == v4 );
	cout << " 2 " << flush;
	// nonempty, same size, set values
	Vec<double>  v5(5);
	Vec<double>  v6(5);
	for (unsigned i = 0; i < 5; i++) {
		v5.setItem(i, i+1);
		v6.setItem(i, i+1);
	}
	assert( v5 == v6 );
	cout << " 3 " << flush;
	// empty vs nonempty
	Vec<double>  v7;
	Vec<double>  v8(5);
	assert( !(v7 == v8) );
	cout << " 4 " << flush;
	// nonempty, same size, first value different
	Vec<double>  v9(5);
	Vec<double>  v10(5);
	Vec<double>  v11(5);
	Vec<double>  v12(5);
	v10.setItem(0, 1);
	assert( !(v9 == v10) );
	cout << " 5 " << flush;
	// nonempty, same size, middle value different
	v11.setItem(2, 1);
	assert( !(v9 == v11) );
	cout << " 6 " << flush;
	// nonempty, same size, last value different
	v12.setItem(4, 1);
	assert( !(v9 == v12) );
	cout << " 7 " << flush;

	cout << "Passed!" << endl;
}

void VecTester::testWriteToStream() const {
      cout << "Testing writeTo(ostream)... " << flush;
      Vec<double> v1(5);
      for (unsigned i = 0; i < 5; i++) {
              v1.setItem(i, i+10);
      }
      // write to an ofstream instead of cout, to automate the test
      ofstream fout("vecStreamOut.txt");
      assert( fout.is_open() );
      fout << v1.getSize() << "\n";
      v1.writeTo(fout);
      fout.close();
      // now read in what we just wrote...
      ifstream fin("vecStreamOut.txt");
      assert( fin.is_open() );
      unsigned size;
      fin >> size;
      assert( size == 5 );
      double value;
      for (unsigned i = 0; i < 5; i++) {
              fin >> value;
              assert( value == i+10 );
      }
      cout << "Passed! See 'vecStreamOut.txt' for values..." <<
      endl;
}

void VecTester::testReadFromStream() const {
      cout << "Testing readFrom(istream)... " << flush;
      // an ifstream is-an istream, so use one to automate the test
      ifstream fin("vecStreamOut.txt");
      assert( fin.is_open() );
      // get the size and build the Vec
      unsigned size;
      fin >> size;
      assert( size == 5 );
      Vec<double> v(size);
      // test readFrom()
      v.readFrom(fin);
      for (unsigned i = 0; i < 5; i++) {
              assert( v.getItem(i)== i+10 );
      }
      fin.close();
      cout << "Passed!" << endl;
}


void VecTester::testInequality() const {
	cout << "Testing !=... " << flush;

	// empty
	Vec<double>  v0;
	Vec<double>  v1;
	assert( !(v0 != v1) );
	cout << " 0 " << flush;

	// empty vs nonempty
	Vec<double>  v2(3);
	assert( v1 != v2 );
	cout << " 1 " << flush;

	// equal sized, same values
	Vec<double>  v3(3);
	Vec<double>  v4(3);
	assert( !(v3 != v4) );
	cout << " 2 " << flush;

	// equal sized, different values
	for (unsigned i = 0; i < 3; i++) {
		v4.myArray[i] = i+1;
	}
	assert( v3 != v4 );
	cout << " 3 " << flush;

	// equal sized, same except first
	for (unsigned i = 0; i < 3; i++) {
		v4.myArray[i] = i+1;
	}
	v3.myArray[0] = 0;
	assert( v3 != v4 );
	cout << " 4 " << flush;

	// equal sized, same except middle
	v3.myArray[1] = 0;
	assert( v3 != v4 );
	cout << " 5 " << flush;

	// equal sized, same except last
 	v3.myArray[2] = 0;
	assert( v3 != v4 );
	cout << " 6 " << flush;

	// equal sized, equal
	v3.myArray[2] = 3;
	assert( !(v3 != v4) );
	cout << " 7 " << flush;

	cout << "Passed!" << endl;
}

void VecTester::testAddition() const {
	cout << "Testing +... " << flush;
	// nonempty
	Vec<double>  v1(3);
	Vec<double>  v2(3);
	v1.setItem(0, 1);
	v1.setItem(1, 2);
	v1.setItem(2, 3);
	v2.setItem(0, 2);
	v2.setItem(1, 4);
	v2.setItem(2, 6);
	Vec<double>  v3 = v1 + v2;
	assert( v3.getItem(0) == 3 );
	assert( v3.getItem(1) == 6 );
	assert( v3.getItem(2) == 9 );
	cout << " 1 " << flush;
	// empty
	Vec<double>  v4, v5;
	v3 = v4 + v5;
	assert( v3.getSize() == 0 );
	assert( v3.myArray == NULL );
	cout << " 2 " << flush;
	// different sizes
	try {
		v3 = v2 + v4;
		cerr << "v2 + v4 succeeded for Vecs of different sizes";
		exit(1);
	} catch (invalid_argument&) {
		cout << " 3 " << flush;
	}
	cout << "Passed!" << endl;
}

void VecTester::testSubtraction() const {
	cout << "Testing -... " << flush;
	// nonempty
	Vec<double>  v1(3);
	Vec<double>  v2(3);
	v1.setItem(0, 1);
	v1.setItem(1, 2);
	v1.setItem(2, 3);
	v2.setItem(0, 2);
	v2.setItem(1, 4);
	v2.setItem(2, 6);
	Vec<double>  v3 = v1 - v2;
	assert( v3.getItem(0) == -1 );
	assert( v3.getItem(1) == -2 );
	assert( v3.getItem(2) == -3 );
	cout << " 1 " << flush;
	// empty
	Vec<double>  v4, v5;
	v3 = v4 - v5;
	assert( v3.getSize() == 0 );
	assert( v3.myArray == NULL );
	cout << " 2 " << flush;
	// different sizes
	try {
		v3 = v2 - v4;
		cerr << "v2 - v4 succeeded for Vecs of different sizes";
		exit(1);
	} catch (invalid_argument&) {
		cout << " 3 " << flush;
	}
	cout << "Passed!" << endl;
}

void VecTester::testDotProduct() const {
	cout << "Testing *... " << flush;
	Vec<double>  v1(3);
	Vec<double>  v2(3);
	v1.setItem(0, 1);
	v1.setItem(1, 2);
	v1.setItem(2, 3);
	v2.setItem(0, 2);
	v2.setItem(1, 4);
	v2.setItem(2, 6);
	double product = v1 * v2;
	assert( product == 28 );
	cout << " 1 " << flush;
	// empty
	Vec<double>  v4, v5;
	product = v4 * v5;
	assert( product == 0 );
	cout << " 2 " << flush;
	// different sizes
	try {
		product = v2 * v4;
		cerr << "v2 * v4 succeeded for Vecs of different sizes";
		exit(1);
	} catch (invalid_argument&) {
		cout << " 3 " << flush;
	}
	cout << "Passed!" << endl;
}

void VecTester::testReadFromFile() const {
      cout << "Testing readFrom()... " << flush;
      Vec<double> v1;
      v1.readFrom("vecTest1.txt");
      assert( v1.getSize() == 3 );
      assert( v1.myArray != NULL );
      assert( v1.getItem(0) == 1 );
      assert( v1.getItem(1) == 2 );
      assert( v1.getItem(2) == 3 );
      cout << " 1 " << flush;

      Vec<double> v2(5);
      double* oldAddr = v2.myArray;
      v2.readFrom("vecTest2.txt");
      assert( v2.getSize() == 4 );
      cout << " 2 " << flush;
      assert( v2.myArray != NULL );
      assert( v2.getItem(0) == 2 );
      assert( v2.getItem(1) == 4 );
      assert( v2.getItem(2) == 6 );
      assert( v2.getItem(3) == 8 );
       /* the following assertion assumes that the new array's base
        *  address is different from the old array's base address,
        *  which may not be true. If your method seems to be right,
        *  is correctly using delete to deallocate the old array,
        *  and passes all assertions except this one, you may
        *  comment out this assertion.
        */
      assert( v2.myArray != oldAddr );
      cout << " 3 " << flush;
      cout << "Passed! Make sure your method closed the file..." << endl;
}

void VecTester::testWriteToFile() const {
      cout << "Testing writeTo()... " << flush;
      // read a vector we know into an empty Vec...
      Vec<double> v1;
      v1.readFrom("vecTest1.txt");
      // make a copy of it in a different file
      v1.writeTo("vecTest1Copy.txt");
      cout << " 1 " << flush;
      cout << "vecTest1Copy.txt created " << flush;
      // read in the copy, and check it
      Vec<double> v3;
      v3.readFrom("vecTest1Copy.txt");
      assert( v3.getSize() == 3 );
      assert( v3.myArray != NULL );
      assert( v3.getItem(0) == 1 );
      assert( v3.getItem(1) == 2 );
      assert( v3.getItem(2) == 3 );
      cout << " 2 " << flush;

      // read a vector we know into a nonempty Vec...
      Vec<double> v2(5);
      v2.readFrom("vecTest2.txt");
      // make a copy of it in a different file
      v2.writeTo("vecTest2Copy.txt");
      cout << " 3 " << flush;
      cout << "vecTest2Copy.txt created " << flush;
      // read in the copy and check it
      v3.readFrom("vecTest2Copy.txt");
      assert( v3.getSize() == 4 );
      assert( v3.myArray != NULL );
      assert( v3.getItem(0) == 2 );
      assert( v3.getItem(1) == 4 );
      assert( v3.getItem(2) == 6 );
      assert( v3.getItem(3) == 8 );
      cout << " 4 " << flush;
      cout << "Passed!  Make sure you closed the file..." <<
      endl;
}


/* VecTester.h provides unit tests for Vec, a simple vector class.
 * Student Name: Zach Wibbenmeyer
 * Date: June 22, 2015
 * Begun by: Joel C. Adams, for CS 112 at Calvin College.
 */
 
#ifndef VECTESTER_H_
#define VECTESTER_H_

//Include the necessary modules
#include "Vec.h"
using namespace std;

//Create a class for the VecTester sourcefile
class VecTester {
public:
	//Implement the tests
	void runTests() const;
	void testDefaultConstructor() const;
	void testExplicitConstructor() const;
	void testDestructor() const;
	void testGetSize() const;
	void testSetItem() const;
	void testGetItem() const;
	void testSetSize() const;
	void testCopyConstructor() const;
	void testAssignment() const;
	void testEquality() const;
	void testWriteToStream() const;
	void testReadFromStream() const;
	void testInequality() const;
	void testAddition() const;
	void testSubtraction() const;
	void testDotProduct() const;
	void testReadFromFile() const;
	void testWriteToFile() const;
	void testSubscriptOperator() const;
};

#endif /*VECTESTER_H_*/
zdw3@englebart:~/workspace/cs112/project6$ cd Debug
zdw3@englebart:~/workspace/cs112/project6/Debug$ ls
ListTester.d  makefile	  project6    subdir.mk  tester.o     VecTester.o
ListTester.o  objects.mk  sources.mk  tester.d	 VecTester.d
zdw3@englebart:~/workspace/cs112/project6/Debug$ make all
make: Nothing to be done for `all'.
zdw3@englebart:~/workspace/cs112/project6/Debug$ cd ..
zdw3@englebart:~/workspace/cs112/project6$ .? /Debug/project6
Running list tests...
Testing list default constructor...  Passed! 
Testing Node default constructor... Passed!
Testing Node explicit constructor...  1  2 Passed!
Testing append()...  0a  0b  1  2  3 Passed!
Testing destructor...  1  2 Passed!  But double-check for memory leaks!
Testing copy constructor...  1  2 Passed!
Testing assignment...  1  2  3  4  5  6  7 Passed!  But double-check for memory leaks!
Testing equality...  1  2  3  4  5 Passed!
Testing inequality... 1  2  3  4  5  6  7  Passed! 
Testing writeTo(ostream)... Passed! 
Testing readFrom(string)... 1  2  Passed! 
Testing getIndexOf(Item)... 1  2  Passed! 
Testing remove(Item)... 1  2  3  4a  4b  5  6  7  8  9  Passed! 
testing Insert() ... 0  1  Passed ! 
Testing prepend...  0  1  2  Passed! 
testing writeToString ... 0  1  Passed! 
Testing the Sort method... 1  2  3  4  5  6  7  8  Passed! 
All tests passed!
Testing class Vec
Testing default constructor... Passed!
Testing explicit constructor...  1  2 Passed!
Testing copy constructor... 1  2  3 Passed!
Testing destructor... Passed, but make sure ~Vec() is returning the array's memory to the system!
Testing =... 0  1  2  3  4  5  6  7 Passed!
Testing setSize()... 0  1  2  3  4 Passed!
Testing getSize()... 1  2 Passed!
Testing setItem()...  0  1  2 Passed!
Testing getItem()...  0  1  2 Passed!
Testing ==... 1  2  3  4  5  6  7 Passed!
Testing writeTo(ostream)... Passed! See 'vecStreamOut.txt' for values...
Testing readFrom(istream)... Passed!
Testing !=...  0  1  2  3  4  5  6  7 Passed!
Testing +...  1  2  3 Passed!
Testing -...  1  2  3 Passed!
Testing *...  1  2  3 Passed!
Testing readFrom()...  1  2  3 Passed! Make sure your method closed the file...
Testing writeTo()...  1 vecTest1Copy.txt created  2  3 vecTest2Copy.txt created  4 Passed!  Make sure you closed the file...
All tests passed!
zdw3@englebart:~/workspace/cs112/project6$ exit

Script done on Tue 27 Oct 2015 07:12:13 PM EDT
